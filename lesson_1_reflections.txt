How could having easy access to the entire history of a file make ou a more efficient programmer in the long term?
The previous examples of firuging out what went wrong by looking quickly at what changed is very efficient.  Also, I tend
to keep code around because I might want to use it some day even if I never use it in the current project, so this way I could delete it and 
still have access to it.

What do you think are the pros and cons of manually choosing when to create a commit, 
like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros: you know when logically it makes sense
Cons: you might forget (this is huge for me)

Why do you think some version control systems, like Git, allow saving multiple files in one 
commit, while others, like Google Docs, treat each file separately?
Google docs seems like it's not for programming, where files are so inter-dependent.

How can you use the commands git log and git diff to view the history of files?
git log shows all of the comments associated with each commit, so do that first
and then pick the "change" you want to see.  Then q to quit, then git diff with
the two arguments the IDs surrounding the commit of interest (lower=earlier first).

How might using version control make you more confident to make changes that could break something?
Knowing I can always go back.


Now that you have your workspace set up, what do you want to try using Git for?
First, I want to switch to sublime for writing these reflections.  
Then, I am trying to learn this to commit and configuration-manage a small java project that
is a huge learning curve for me, so mistakes will abound.

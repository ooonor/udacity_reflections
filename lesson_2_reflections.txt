What happens when you initialize a repository? Why do you need to do it?
Git creates an invisible directory, .git, and (I presume) prepares to have files added to it.
You need to do it so that you can eventually add, commit, check out files.
How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area helps to group one or more files so that you can commit only part of a directory to the repository at one time. 
 It helps to divide multiple files into logical groups.  Otherwise you'd have to do either individual file commits or the whole directory
 (or maybe have a long command line to list all files you want to commit at once)

How can you use the staging area to make sure you have one commit per logical change?
You can make a bunch of changes to code if you have a to-do list, but only the files associated with one logical change into the staging area at a time.
(However, this won't work if one file's changes involve two logical changes).

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
This is a tough one for me because I'm so used to keeping everything I code in one branch, since I've never CM''d before.
In one project, however, we had to write code for multiple operating systems, and had branching inside the code that maybe could
be moved outside to git.  Instead of a bunch of if-the-else statements, we can just have each branch represent the code for one operating
system.

How do the diagrams help you visualize the branch structure?
so much easier than having to look through list of commits.  Not having this would be like having to make a list of the 50 states by stating each state's boreders.
